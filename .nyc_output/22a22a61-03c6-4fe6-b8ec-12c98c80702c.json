{"C:\\Users\\james\\Documents\\Code Projects\\shimi\\register.js":{"path":"C:\\Users\\james\\Documents\\Code Projects\\shimi\\register.js","statementMap":{"0":{"start":{"line":6,"column":16},"end":{"line":6,"column":34}},"1":{"start":{"line":7,"column":22},"end":{"line":7,"column":53}},"2":{"start":{"line":9,"column":1},"end":{"line":13,"column":4}}},"fnMap":{},"branchMap":{},"s":{"0":1,"1":1,"2":1},"f":{},"b":{},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"b881f45f6c4a72ebec1b75158fe5fd3f40c258cd","contentHash":"288d65892c01756f2b4b377cca466d418dcbf544c800332b8b5f8d8fc500eb93"},"C:\\Users\\james\\Documents\\Code Projects\\shimi\\src\\Note.ts":{"path":"C:\\Users\\james\\Documents\\Code Projects\\shimi\\src\\Note.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":3,"column":26},"end":{"line":3,"column":54}},"2":{"start":{"line":14,"column":8},"end":{"line":14,"column":27}},"3":{"start":{"line":15,"column":8},"end":{"line":15,"column":71}},"4":{"start":{"line":16,"column":8},"end":{"line":16,"column":62}},"5":{"start":{"line":17,"column":8},"end":{"line":17,"column":23}},"6":{"start":{"line":18,"column":8},"end":{"line":18,"column":31}},"7":{"start":{"line":19,"column":8},"end":{"line":19,"column":23}},"8":{"start":{"line":22,"column":21},"end":{"line":22,"column":55}},"9":{"start":{"line":24,"column":26},"end":{"line":24,"column":61}},"10":{"start":{"line":26,"column":15},"end":{"line":26,"column":43}},"11":{"start":{"line":28,"column":20},"end":{"line":28,"column":49}},"12":{"start":{"line":31,"column":8},"end":{"line":32,"column":25}},"13":{"start":{"line":32,"column":12},"end":{"line":32,"column":25}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":23}},"15":{"start":{"line":34,"column":8},"end":{"line":34,"column":20}},"16":{"start":{"line":38,"column":8},"end":{"line":39,"column":25}},"17":{"start":{"line":39,"column":12},"end":{"line":39,"column":25}},"18":{"start":{"line":40,"column":8},"end":{"line":40,"column":24}},"19":{"start":{"line":41,"column":8},"end":{"line":41,"column":20}},"20":{"start":{"line":44,"column":0},"end":{"line":44,"column":23}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":13,"column":4},"end":{"line":13,"column":5}},"loc":{"start":{"line":13,"column":47},"end":{"line":20,"column":5}},"line":13},"1":{"name":"(anonymous_1)","decl":{"start":{"line":22,"column":4},"end":{"line":22,"column":5}},"loc":{"start":{"line":22,"column":19},"end":{"line":22,"column":57}},"line":22},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":4},"end":{"line":24,"column":5}},"loc":{"start":{"line":24,"column":24},"end":{"line":24,"column":63}},"line":24},"3":{"name":"(anonymous_3)","decl":{"start":{"line":26,"column":4},"end":{"line":26,"column":5}},"loc":{"start":{"line":26,"column":13},"end":{"line":26,"column":45}},"line":26},"4":{"name":"(anonymous_4)","decl":{"start":{"line":28,"column":4},"end":{"line":28,"column":5}},"loc":{"start":{"line":28,"column":18},"end":{"line":28,"column":51}},"line":28},"5":{"name":"(anonymous_5)","decl":{"start":{"line":30,"column":4},"end":{"line":30,"column":5}},"loc":{"start":{"line":30,"column":12},"end":{"line":35,"column":5}},"line":30},"6":{"name":"(anonymous_6)","decl":{"start":{"line":37,"column":4},"end":{"line":37,"column":5}},"loc":{"start":{"line":37,"column":11},"end":{"line":42,"column":5}},"line":37}},"branchMap":{"0":{"loc":{"start":{"line":31,"column":8},"end":{"line":32,"column":25}},"type":"if","locations":[{"start":{"line":31,"column":8},"end":{"line":32,"column":25}},{"start":{"line":31,"column":8},"end":{"line":32,"column":25}}],"line":31},"1":{"loc":{"start":{"line":38,"column":8},"end":{"line":39,"column":25}},"type":"if","locations":[{"start":{"line":38,"column":8},"end":{"line":39,"column":25}},{"start":{"line":38,"column":8},"end":{"line":39,"column":25}}],"line":38}},"s":{"0":1,"1":1,"2":5,"3":5,"4":5,"5":5,"6":5,"7":5,"8":1,"9":0,"10":9,"11":9,"12":2,"13":1,"14":1,"15":1,"16":2,"17":1,"18":1,"19":1,"20":1},"f":{"0":5,"1":1,"2":0,"3":9,"4":9,"5":2,"6":2},"b":{"0":[1,1],"1":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/james/Documents/Code Projects/shimi/src/Note.ts","sources":["C:/Users/james/Documents/Code Projects/shimi/src/Note.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb,uDAAgD;AAEhD,yDAAyD;AACzD,MAAqB,IAAI;IA2BrB;;;;;;OAMG;IACH,YAAY,KAAa,EAAE,QAAgB,EAAE,OAAe,EAAE,GAAY;QACtE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,eAAe,GAAG,IAAI,yBAAe,CAAC,QAAQ,CAAC,CAAC;QACrD,IAAI,CAAC,SAAS,GAAG,IAAI,yBAAe,CAAC,KAAK,CAAC,CAAC;QAC5C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;QACf,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;IAnCD,sEAAsE;IACtE,IAAI,QAAQ,KAAa,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC;IAC7D,sEAAsE;IACtE,IAAI,QAAQ,CAAC,KAAa,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;IAOnE,0BAA0B;IAC1B,IAAI,EAAE,KAAc,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;IAClD,0BAA0B;IAC1B,IAAI,EAAE,CAAC,KAAc,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC;IAwBxD,oEAAoE;IACpE,KAAK;QACD,IAAI,IAAI,CAAC,EAAE;YACP,OAAO,KAAK,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;QACf,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,qEAAqE;IACrE,IAAI;QACA,IAAI,CAAC,IAAI,CAAC,EAAE;YACR,OAAO,KAAK,CAAC;QACjB,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC;QAChB,OAAO,IAAI,CAAC;IAChB,CAAC;CACJ;AA1DD,uBA0DC","sourcesContent":["'use strict';\r\n\r\nimport PropertyTracker from './PropertyTracker';\r\n\r\n/** Stores note information for the lifetime of a note */\r\nexport default class Note {\r\n    /** The MIDI pitch of the note, valid values range from 0 - 127 */\r\n    pitch: number;\r\n\r\n    /** Tracks changes to the note velocity */\r\n    velocityTracker: PropertyTracker<number>;\r\n    /** The note's velocity (loudness), valid values range from 0 - 127 */\r\n    get velocity(): number { return this.velocityTracker.value; }\r\n    /** The note's velocity (loudness), valid values range from 0 - 127 */\r\n    set velocity(value: number) { this.velocityTracker.value = value; }\r\n\r\n    /** \r\n     * Tracks changes to whether the note is playing\r\n     * By default the state is on and dirty\r\n     */\r\n    onTracker: PropertyTracker<boolean>;\r\n    /** Is the note playing */\r\n    get on(): boolean { return this.onTracker.value; }\r\n    /** Is the note playing */\r\n    set on(value: boolean) { this.onTracker.value = value; }\r\n\r\n    /** Which channel should the note play on, valid values range from 0 - 15 */\r\n    channel: number;\r\n\r\n    /** Provides way of identifying notes so they can be retrieved later */\r\n    ref: string;\r\n\r\n    /**\r\n     * \r\n     * @param pitch The MIDI pitch of the note, valid values range from 0 - 127\r\n     * @param velocity The note's velocity (loudness), valid values range from 0 - 127\r\n     * @param channel Which channel should the note play on, valid values range from 0 - 15\r\n     * @param ref Provides way of identifying notes so they can be retrieved later\r\n     */\r\n    constructor(pitch: number, velocity: number, channel: number, ref?: string) {\r\n        this.pitch = pitch;\r\n        this.velocityTracker = new PropertyTracker(velocity);\r\n        this.onTracker = new PropertyTracker(false);\r\n        this.on = true;\r\n        this.channel = channel;\r\n        this.ref = ref;\r\n    }\r\n\r\n    /** Sets on = true, returns whether this changed the note's state */\r\n    start(): boolean {\r\n        if (this.on)\r\n            return false;\r\n        this.on = true;\r\n        return true;\r\n    }\r\n\r\n    /** Sets on = false, returns whether this changed the note's state */\r\n    stop(): boolean {\r\n        if (!this.on)\r\n            return false;\r\n        this.on = false;\r\n        return true;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"a5046f4dfae15aa7e27bfa495bb8454c2ceb6f53","contentHash":"ec551f73469211fa14c6aef150fc06539b3ab7b53d837a5cee19c4a6bc189e26"},"C:\\Users\\james\\Documents\\Code Projects\\shimi\\src\\PropertyTracker.ts":{"path":"C:\\Users\\james\\Documents\\Code Projects\\shimi\\src\\PropertyTracker.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":17,"column":8},"end":{"line":17,"column":31}},"2":{"start":{"line":18,"column":8},"end":{"line":18,"column":34}},"3":{"start":{"line":22,"column":8},"end":{"line":22,"column":44}},"4":{"start":{"line":26,"column":8},"end":{"line":26,"column":35}},"5":{"start":{"line":30,"column":8},"end":{"line":30,"column":35}},"6":{"start":{"line":33,"column":0},"end":{"line":33,"column":34}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":16,"column":4},"end":{"line":16,"column":5}},"loc":{"start":{"line":16,"column":27},"end":{"line":19,"column":5}},"line":16},"1":{"name":"(anonymous_1)","decl":{"start":{"line":21,"column":4},"end":{"line":21,"column":5}},"loc":{"start":{"line":21,"column":18},"end":{"line":23,"column":5}},"line":21},"2":{"name":"(anonymous_2)","decl":{"start":{"line":25,"column":4},"end":{"line":25,"column":5}},"loc":{"start":{"line":25,"column":13},"end":{"line":27,"column":5}},"line":25},"3":{"name":"(anonymous_3)","decl":{"start":{"line":29,"column":4},"end":{"line":29,"column":5}},"loc":{"start":{"line":29,"column":11},"end":{"line":31,"column":5}},"line":29}},"branchMap":{},"s":{"0":1,"1":15,"2":15,"3":4,"4":1,"5":1,"6":1},"f":{"0":15,"1":4,"2":1,"3":1},"b":{},"inputSourceMap":{"version":3,"file":"C:/Users/james/Documents/Code Projects/shimi/src/PropertyTracker.ts","sources":["C:/Users/james/Documents/Code Projects/shimi/src/PropertyTracker.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;AAEb;;;;;;;GAOG;AACH,MAAqB,eAAe;IAOhC;;;OAGG;IACH,YAAY,SAAa;QACrB,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,SAAS,CAAC;IAC9B,CAAC;IAED,2DAA2D;IAC3D,IAAI,OAAO;QACP,OAAO,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,QAAQ,CAAC;IACxC,CAAC;IAED,uFAAuF;IACvF,MAAM;QACF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;IAC/B,CAAC;IAED,yFAAyF;IACzF,IAAI;QACA,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC;IAC/B,CAAC;CACJ;AA9BD,kCA8BC","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Use this class in place of regular member variables on other classes as a way to get\r\n * dirty checking & undo functionality built into them, eg:\r\n * \r\n * velocityTracker = new PropertyTracker<number>(100);\r\n * get velocity(): number { return this.velocityTracker.value; }\r\n * set velocity(value: number) { this.velocityTracker.value = value; }\r\n */\r\nexport default class PropertyTracker<T> {\r\n    /** The most up-to-date value */\r\n    value: T;\r\n\r\n    /** The last accepted value */\r\n    oldValue: T;\r\n\r\n    /**\r\n     * \r\n     * @param initValue The initial accepted value that the tracker gets instanciated with\r\n     */\r\n    constructor(initValue?: T) {\r\n        this.value = initValue;\r\n        this.oldValue = initValue;\r\n    }\r\n\r\n    /** Has the property changed since it was last accepted? */\r\n    get isDirty(): boolean {\r\n        return this.value !== this.oldValue;\r\n    }\r\n\r\n    /** Accept changes made to the property, no longer hang on to the old property value */\r\n    accept(): void {\r\n        this.oldValue = this.value;\r\n    }\r\n\r\n    /** Undo changes made to the property, revert back to the last accepted property value */\r\n    undo(): void {\r\n        this.value = this.oldValue;\r\n    }\r\n}"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"7c276b61e8006608440d73a576de9de9794b9ab5","contentHash":"b8a2fbb17f92e3f7abaa922821264b66d78f01f89e622fd5dd356ef416c4f314"}}